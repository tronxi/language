mod SEMANTICS is
    pr SYNTAX .
    pr IO .
    pr CONVERSION .

    sort System .
    subsort System < Attribute .
    op {_|_} : Function Memory -> System [ctor] .

    op System : -> Cid . 
    op system : -> Oid . 

    var M : Memory .
    var Q : Qid .
    vars T T' T'' : Type .
    var E : Expression .
    var P PBody PBodyElse : Program .
    var C : Condition .
    var A A' : Assig .
    var Array : Array .
    var S S' : String .
    var O : Oid .
    var Length Length' : Int .
    var F F' : Function .
    var R : Return .

    rl [printFinal] :
        {F function 'main() { final } | M }
        =>
        {F function 'main() { println(""); end } | M } .

    rl [coment] :
       { F function 'main() {// PBody P} | M}
        =>
        { F function 'main() {P} | M} .

    rl [callVoidFunction] :
        { F function 'main() {Q(); P } function Q () {PBody} | M }
        =>
        { F function 'main() {PBody P } function Q () {PBody} | M } .

    rl [assignVoidFunction] :
        { F function 'main() {(T = Q()); P } function Q () {PBody} | M }
        =>
        { F function 'main() {PBody P } function Q () {PBody} | M } .

    rl [callReturnFunction] :
        { F function 'main() {Q(); P } function Q () {PBody * R } | M }
        =>
        { F function 'main() {PBody P } function Q () {PBody * R} | M } .

    rl [assignReturnFunction] :
        { F function 'main() {(T = Q()); P } function Q () {PBody * return E ;} | M }
        =>
        { F function 'main() {PBody P } function Q () {PBody * return E ;} | assigInMemory(T = E, M)} .

    rl [printType] :
        < system : System | { F function 'main() {print(T); P}| M} >
        => 
        < system : System | { F function 'main() {P} | M} > print(string(load(M, T), 10), system) .
    
    rl [printTypeMatrix] :
        < system : System | { F function 'main() {print([ Q < T > < T' >]); P} | M} >
        => 
        < system : System |{ F function 'main() {P} | M} > print(string(load(M, toQid(Q, T, T', M)), 10), system) .

    rl [printlnType] :
        < system : System | { F function 'main() {println(T); P} | M} >
        => 
        < system : System |{ F function 'main() {P} | M} > println(string(load(M, T), 10), system) .

    rl [printlnTypeMatrix] :
        < system : System | { F function 'main() {println([ Q < T > < T' >]); P} | M} >
        => 
        < system : System |{ F function 'main() {P} | M} > println(string(load(M, toQid(Q, T, T', M)), 10), system) .
    
    rl [printString] :
        < system : System | { F function 'main() {print(S); P} | M} >
        => 
       print(S, system) < system : System |{ F function 'main() {P} | M } > .

    rl [printlnString] :
        < system : System | { F function 'main() {println(S); P} | M} >
        => 
       println(S, system) < system : System |{F function 'main() { P }| M } > .
    
    rl [startScanf] :
        < system : System | { F function 'main() {scanf(T, S); P }| M } >
        =>
        getLine (stdin, system, S) < system : System | { F function 'main() {(T =futureRead); P} | M } > .

    crl [endScanf] :
        < system : System | { F function 'main() {(T =futureRead); P} | M } > gotLine (system, O, S)
        =>
        < system : System | { F function 'main() {P} | assigInMemory(T = T', M) } > 
        if S =/= "" 
        /\ Length := length(S)
        /\ Length' := sd(Length, 1)
        /\ T' := rat(substr(S, 0, Length'), 10) .

    rl [startScanfInMatrix] :
        < system : System | { F function 'main() {scanf([ Q < T > < T' >], S); P} | M } >
        =>
        getLine (stdin, system, S) < system : System | { F function 'main() { ([ Q < T > < T' >] =futureRead); P} | M } > .

    crl [endScanfInMatrix] :
        < system : System | { F function 'main() {([ Q < T > < T' >] =futureRead); P }| M } > gotLine (system, O, S)
        =>
        < system : System | {F function 'main() { P }| assigInMemoryMatrix(Q, T, T', T'', M) } > 
        if S =/= "" 
        /\ Length := length(S)
        /\ Length' := sd(Length, 1)
        /\ T'' := rat(substr(S, 0, Length'), 10) .

    rl [assigInMatrix] : 
        { F function 'main() {([ Q < T > < T' >]= E); P} | M}
        =>
        { F function 'main() {P} | assigInMemoryMatrix(Q, T, T', E, M) } .
    
    rl [assigSize] : 
        { F function 'main() {(T = size(Q)); P} | M}
        =>
        { F function 'main() {P} | assigInMemory(T = size(M, Q, 0), M) } .
    
    rl [assig] : 
        { F function 'main() {(T = E); P} | M}
        =>
        { F function 'main() {P} | assigInMemory(T = E, M) } .
    
    rl [assigArray] :
        { F function 'main() {(T = [Array]); P} | M}
        =>
        { F function 'main() {P} | assigInMemory(T = [Array], M, 0)} .

    crl [ifTrue] :
        { F function 'main() {if(C){PBody} P }| M }
        => 
        { F function 'main() {PBody P} | M } 
        if eval(C, M) .

    crl [ifFalse] :
        { F function 'main() {if(C){PBody} P} | M }
        => 
        { F function 'main() {P} | M } 
        if not eval(C, M) .

    crl [ifElseTrue] :
        { F function 'main() {if(C){PBody}else{PBodyElse} P} | M }
        => 
        { F function 'main() {PBody P} | M } 
        if eval(C, M) .

    crl [ifElseFalse] :
        { F function 'main() {if(C){PBody}else{PBodyElse} P} | M }
        => 
        { F function 'main() {PBodyElse P} | M } 
        if not eval(C, M) .

    crl [whileTrue] :
        { F function 'main() {while(C){PBody} P} | M }
        => 
        { F function 'main() {PBody while(C){PBody} P} | M } 
        if eval(C, M) .

    crl [whileFalse] :
        { F function 'main() {while(C){PBody} P} | M }
        => 
        { F function 'main() {P} | M } 
        if not eval(C, M) .
    
    rl [doWhile] :
        { F function 'main() {do {PBody} while(C); P }| M}
        =>
        {F function 'main() {PBody while(C){PBody} P} | M} .

    rl [initalFor] :
        { F function 'main() {for( (A); (C); (A'); ){PBody} P} | M }
        =>
        { F function 'main() {(A); forWithoutInitial((C); (A'); ){PBody} P} | M } .

    crl [forTrue] :
        { F function 'main() {forWithoutInitial((C); (A'); ){PBody} P} | M }
        =>
        { F function 'main() {PBody (A'); forWithoutInitial((C); (A');){PBody} P} | M }
        if eval(C, M) .

    crl [forFalse] :
        { F function 'main() {forWithoutInitial((C); (A'); ){PBody} P} | M }
        =>
        { F function 'main() {P} | M }
        if not eval(C, M) .

endm