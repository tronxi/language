fmod CONDITION is

    pr MEMORY .
    pr EXPRESSION .

    sorts Condition MultipleCondition .
    subsort MultipleCondition < Condition .

    op _eq_ : Expression Expression -> Condition [ctor] .
    op _neq_ : Expression Expression -> Condition [ctor] .
    op _gt_ : Expression Expression -> Condition [ctor] .
    op _gte_ : Expression Expression -> Condition [ctor] .
    op _lt_ : Expression Expression -> Condition [ctor] .
    op _lte_ : Expression Expression -> Condition [ctor] .

    op _&&_ : Condition Condition -> MultipleCondition [ctor assoc comm] .
    op _||_ : Condition Condition -> MultipleCondition [ctor assoc comm] .

    var E E' : Expression .
    var M : Memory .
    var C C' : Condition .

    op eval : Condition Memory -> Bool .
    eq eval(E eq E', M) = load(M, eval(E, M)) == load(M, eval(E', M)) .
    eq eval(E neq E', M) = load(M, eval(E, M)) =/= load(M, eval(E', M)) .
    eq eval(E gt E', M) = load(M, eval(E, M)) > load(M, eval(E', M)) .
    eq eval(E gte E', M) = load(M, eval(E, M)) >= load(M, eval(E', M)) .
    eq eval(E lt E', M) = load(M, eval(E, M)) < load(M, eval(E', M)) .
    eq eval(E lte E', M) = load(M, eval(E, M)) <= load(M, eval(E', M)) .
    eq eval(C && C', M) = eval(C, M) and eval(C', M) .
    eq eval(C || C', M) = eval(C, M) or eval(C', M) .

endfm